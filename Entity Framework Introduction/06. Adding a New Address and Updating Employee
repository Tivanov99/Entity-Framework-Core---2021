using SoftUni.Data;
using SoftUni.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace SoftUni
{
    public class StartUp
    {
        static void Main(string[] args)
        {
            SoftUniContext context = new SoftUniContext();
            //Console.WriteLine(GetEmployeesFullInformation(context));
            //Console.WriteLine(GetEmployeesWithSalaryOver50000(context));
            //Console.WriteLine(GetEmployeesFromResearchAndDevelopment(context));
            Console.WriteLine(AddNewAddressToEmployee(context));

        }
        //public static string GetEmployeesFullInformation(SoftUniContext context)
        //{
        //    StringBuilder result = new StringBuilder();
        //    var employees = context.Employees.Select(emp => new { emp.EmployeeId, emp.FirstName, emp.LastName, emp.MiddleName, emp.JobTitle, emp.Salary }).OrderBy(x => x.EmployeeId).ToList();
        //    foreach (var employee in employees)
        //    {
        //        result.AppendLine($"{employee.FirstName} {employee.LastName} {employee.MiddleName} {employee.JobTitle} {employee.Salary:f2}");
        //    }
        //    return result.ToString().TrimEnd();
        //}
        public static string GetEmployeesWithSalaryOver50000(SoftUniContext context)
        {
            var employees = context.Employees.Select(x => new { x.FirstName, x.Salary }).Where(x => x.Salary > 50000).OrderBy(x => x.FirstName).ToList();
            List<string> employeesResult = new List<string>();
            StringBuilder sb = new StringBuilder();
            foreach (var employee in employees)
            {
                sb.AppendLine($"{employee.FirstName} - {employee.Salary:F2}");
            }
            return sb.ToString().TrimEnd();
        }
        public static string GetEmployeesFromResearchAndDevelopment(SoftUniContext context)
        {
            var employees = context
                .Employees
                .Select(x => new { x.FirstName, x.LastName, DepartmentName = x.Department.Name, x.Salary })
                .Where(x => x.DepartmentName == "Research and Development")
                .OrderBy(x => x.Salary).ThenByDescending(x => x.FirstName)
                .ToList();
            StringBuilder sb = new StringBuilder();

            foreach (var employee in employees)
            {
                sb.AppendLine($"{employee.FirstName} {employee.LastName} from {employee.DepartmentName} - ${employee.Salary:F2}");
            }
            return sb.ToString().TrimEnd();
        }
        public static string AddNewAddressToEmployee(SoftUniContext context)
        {
            Address NewAddres = new Address();
            NewAddres.TownId = 4;
            NewAddres.AddressText = "Vitoshka 15";
            context.Addresses.Add(NewAddres);
            context.SaveChanges();

            var NakovsEmployees = context.Employees.Select(x => x).Where(x => x.LastName == "Nakov");
            foreach (var employee in NakovsEmployees)
            {
                employee.Address = NewAddres;
            }

            context.SaveChanges();


            var employees = context.Employees
                .Select(x => new { x.AddressId, x.Address })
                .OrderByDescending(x => x.Address)
                .ToList();

            StringBuilder sb = new StringBuilder();
            int count = 0;
            foreach (var employee in employees)
            {
                if (count == 10)
                {
                    break;
                }
                sb.AppendLine($"{employee.Address.AddressText}");
                count++;
            }
            return sb.ToString().TrimEnd();
        }
    }
}
