using ProductShop.Data;
using System.IO;
using System.Xml.Linq;
using System;
using ProductShop.Models;
using System.Collections.Generic;
using System.Linq;
using AutoMapper;
using ProductShop.Dtos.Export;
using AutoMapper.QueryableExtensions;
using System.Xml.Serialization;
using Newtonsoft.Json;
using Microsoft.EntityFrameworkCore;

namespace ProductShop
{
    public class StartUp
    {
        public static IMapper mapper;

        public static void Main(string[] args)
        {
            ProductShopContext context = new ProductShopContext();
            
            Console.WriteLine(GetProductsInRange(context));
        }

        public static string GetProductsInRange(ProductShopContext context)
        {
            Initialize();

            List<ProductOutputDTO> productOutputDTOs = context
                  .Products
                  .Include(p => p.Buyer)}
                  .Where(p => p.Price >= 500 && p.Price <= 1000)
                  .ProjectTo<ProductOutputDTO>(mapper.ConfigurationProvider)
                  .OrderBy(p => p.Price)
                  .Take(10)
                  .ToList();

            var serializer = new XmlSerializer(typeof(List<ProductOutputDTO>), new XmlRootAttribute("Products"));


            var textWriter = new StringWriter();

            var ns = new XmlSerializerNamespaces();

            ns.Add("", "");

            serializer.Serialize(textWriter, productOutputDTOs, ns);

            return textWriter.ToString();
        }
        public static void Initialize()
        {
            MapperConfiguration configuration = new MapperConfiguration(cnfg =>
            {
                cnfg.AddProfile<ProductShopProfile>();
            });
            mapper = new Mapper(configuration);
        }
    }
}
